let jwt,User;_0f5‍.x([["default",()=>_0f5‍.o]]);_0f5‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);_0f5‍.w("../models/user",[["default",["User"],function(v){User=v}]]);


const jwtMiddleware = async (ctx, next) => {
    const token = ctx.cookies.get('access_token');
    if (!token) return next(); // 토큰이 없음
    try {
        const decoded = jwt.verify(token, process.env.JWT_SECRET); // Jwt와 jwt 주의
        ctx.state.user = {
            _id: decoded._id,
            username: decoded.username,
        };
        // 토큰의 남은 유효기간이 3.5일 미만이면 재발급
        const now = Math.floor(Date.now() / 1000);
        if (decoded.exp - now < 60 * 60 * 24 * 3.5) {
            const user = await User.findById(decoded._id);
            const token = user.generateToken();
            ctx.cookies.set('access_token', token, {
                maxAge: 1000 * 60 * 60 * 24 * 7,
                httpOnly: true,
            });
        }
        // console.log(decoded); // 재발급 설정하면서 삭제
        return next();
    } catch (e) {
        // 토큰 검증 실패
        return next();
    }
};

_0f5‍.d(jwtMiddleware);
